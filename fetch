#!/usr/bin/python
import os
import os.path
import argparse
from datetime import date
import subprocess
from bin import read_pileup, match_breeds
wd = os.path.dirname(os.path.realpath(__file__))
sra = wd + "/bin/sra-pileup.2.9.1"
parser = argparse.ArgumentParser(description = "Fetch pileup files from SRA for given accessions")
#parser.add_argument('--user', type=argparse.FileType('r'), default=None)
parser.add_argument('-r', default=None)
parser.add_argument('-f', default=None)
parser.add_argument('--breeds', default=False)
parser.add_argument('-b', default= wd + "/breeds")
parser.add_argument('-a', default= "./SraRunInfo.csv")
parser.add_argument('--temp',default= "./temp_pileup_" + str(date.today()))
parser.add_argument('--out', default= "autogenerated_allele_calling_" + str(date.today()))
parser.add_argument('--ncpus', default = 1)
#a = parser.parse_args(['--user', 'user_info.config'])
a = parser.parse_args()
if int(a.ncpus) < 0:
	print("illegal number of cpus specified!")
	exit(1)
if os.path.isfile(a.out):
	print("Error! output file {} already exists! Use another output file name!".format(a.out))
	exit(1)
if not os.path.isfile(a.a):
	print("Error! SRA run accessions file {} not exist or can't be accessed!".format(a.a))
	exit(1)
if os.path.exists(a.temp):
	print("Warning! temp directory {} already exists! It will not be cleared automatically to avoid"\
" deleting user files".format(a.temp))
	delete_temp = False
else:
	print("{} doesn't exist. Creating it now...".format(a.temp))
	subprocess.call(["mkdir", a.temp])
	delete_temp = True
if a.f:
#If a list of loci is provided
	if int(a.ncpus) == 1:
		call = wd + "/bin/SRA_Get_pileup_list"
		subprocess.call([call, a.a, a.f, a.temp, sra])
	else:
		call = wd + "/bin/SRA_Get_pileup_list_parallel"
		subprocess.call([call, a.a, a.f, a.temp, sra, a.ncpus])
elif a.r:
#If a list is not provided but a region is provided
	if int(a.ncpus) == 1:
		call = wd + "/bin/SRA_Get_pileup"
		subprocess.call([call, a.a, a.r, a.temp, sra])
	else:
		call = wd + "/bin/SRA_Get_pileup_parallel"
		subprocess.call([call, a.a, a.r, a.temp, sra, a.ncpus])
else:
#Neither a list or a region is provided, report error and exit
	print("Error! Either a region or a list of regions must be provided! Want whole genomoe data? Simply download their fastq files using fastq-dump from sra tools")
	exit(1)
#Creating a 2D hash to store variant data
dict = {}
refs = {}
file_list = []
for (path, dirnames, files) in os.walk(a.temp):
	for file in files:
		file_list.append(file)
		print(file)
		read_pileup.read_file(path, file, dict, refs)
	break
print(dict)
print(file_list)
try:
	out = open(a.out + ".csv", 'w')
except IOError as e:
	if e.errno == errno.EACCES:
		print("Error: Permission denied when trying to write to output")
		exit(1)
	raise Exception("Failed to open file")
out.write('chr,pos,ref,' + ','.join(file_list) + '\n')
for identifier in dict:
	out.write(identifier + ',' + refs[identifier])
	for file in file_list:
		if file in dict[identifier]:
			out.write(',' + dict[identifier][file])
		else:
			out.write(',')
	out.write('\n')
if a.breeds:
	match_breeds.match_breeds(dict, a.b, a.out + "_breeds.csv")
